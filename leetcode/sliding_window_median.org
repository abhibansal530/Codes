#+TITLE: Sliding Window Median

* Problem
You are given an integer array =nums= and an integer =k=. There is a sliding window of size =k= which
is moving from the very left of the array to the very right.

You can only see the =k= numbers in the window. Each time the sliding window moves right by one position.

Return the median array for each window in the original array.
* Solution
Idea is similar to running median, except we need to use multiset instead of heap to also support removals.
#+BEGIN_SRC cpp
class Solution {

    class RunningMedian {
        multiset<int, greater<int>> left_set_;
        multiset<int> right_set_;

        // Invariant maintained :
        // If even elements : left_set_ and right_set_ size are equal
        // Otherwise left_set_ has one extra element than right_set_.
        void MaybeBalanceSets() {
            if (left_set_.size() == right_set_.size()) return;

            bool balanced = false;
            while (right_set_.size() > left_set_.size()) {
                int r = *right_set_.begin();
                right_set_.erase(right_set_.begin());
                left_set_.insert(r);
                balanced = true;
            }

            if (balanced) return;

            while (left_set_.size() > right_set_.size() + 1) {
                int l = *left_set_.begin();
                left_set_.erase(left_set_.begin());
                right_set_.insert(l);
            }
        }

      public:
        RunningMedian() {}

        void Insert(int x) {
            if (left_set_.empty() || x <= *left_set_.begin()) {
                left_set_.insert(x);
            } else {
                right_set_.insert(x);
            }

            MaybeBalanceSets();
        }

        void Remove(int x) {
            auto it = left_set_.find(x);
            if (it != left_set_.end()) {
                left_set_.erase(it);
                MaybeBalanceSets();
                return;
            }

            auto it2 = right_set_.find(x);
            if (it2 != right_set_.end()) {
                right_set_.erase(it2);
                MaybeBalanceSets();
            }
        }

        double CurrMedian() {
            int l = left_set_.empty() ? 0 : *left_set_.begin();
            int r = right_set_.empty() ? 0 : *right_set_.begin();
            if (left_set_.size() == right_set_.size()) {
                double sum = double(l) + double(r);
                return sum / 2.0;
            }

            return l;
        }
    };

public:
    vector<double> medianSlidingWindow(vector<int>& nums, int k) {
        RunningMedian running_med;
        vector<double> ans;
        int l = 0, r = -1, n = nums.size();
        while (l < n && r < n) {
            if (l > r || r - l + 1 < k) {
                if (r + 1 >= n) break;

                // Expand window.
                running_med.Insert(nums[++r]);
                continue;
            }

            if (r >= l && r - l + 1 == k) {
                ans.push_back(running_med.CurrMedian());
                running_med.Remove(nums[l++]);
            }
        }

        return ans;
    }
};
#+END_SRC
