#+TITLE: Reverse Nodes In K Group

* Problem
Given a linked list, reverse the nodes of a linked list =k= at a time and return its modified list.

=k= is a positive integer and is less than or equal to the length of the linked list. If the number
of nodes is not a multiple of =k= then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.
* Solution
#+BEGIN_SRC cpp
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    struct Window {
        ListNode *start, *end;
        int sz = 0;

        Window() : start(nullptr), end(nullptr), sz(0) {}
        Window (ListNode* s, ListNode* e, int _sz = 0) : start(s), end(e), sz(_sz) {}

        // Add this node to this window.
        void Add(ListNode* node) {
            if (!start) {
                start = node;
            }
            end = node;
            ++sz;
        }

        int Size() const {
            return sz;
        }

        void Reverse() {
            if (!sz) return;
            int cnt = 0;
            ListNode *rev_head = nullptr;
            for (ListNode *node = start; node && cnt < sz; ++cnt) {
                auto old_nxt = node->next;
                node->next = rev_head;
                rev_head = node;
                node = old_nxt;
            }
            swap(start, end);
        }
    };

public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        Window last, curr;
        ListNode *ret_head;
        for (ListNode *node = head; node;) {
            // Update current window.
            curr.Add(node);

            if (curr.Size() < k) {
                node = node->next;
                continue;
            }

            // 1. Reverse curr window.
            // 2. Prev window tail -> next = curr window head.
            // 3. curr window tail -> next = next node.
            auto old_nxt = node->next;
            curr.Reverse();
            if (last.Size()) {
                last.end->next = curr.start;
            } else {
                ret_head = curr.start;
            }

            curr.end->next = old_nxt;
            last = curr;
            curr = Window();
            node = old_nxt;
        }

        return ret_head;
    }
};
#+END_SRC
